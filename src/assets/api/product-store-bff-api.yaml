---
openapi: 3.0.3
info:
  title: onecx-product-store-bff
  description: Backend-For-Frontend (BFF) service for onecx product store. With this API you can manage applications (technical microfrontend(s)) and product(s) as logical abstraction. A Product is a versioned cover for a collection of applications (versioned) to be used within workspaces. Microfrontends (applications) which have reference to exposed/registered modules
  version: 1.0.0
  contact:
    email: 'tkit_dev@1000kit.org'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: 'http://onecx-product-store-bff:8080'
tags:
  - name: OneCX Product Store
paths:
  /microfrontends:
    post:
      tags:
        - Microfrontends
      description: Create microfrontend
      operationId: createMicrofrontend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMicrofrontendRequest'
      responses:
        '201':
          description: New microfrontend created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microfrontend'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /microfrontends/search:
    post:
      tags:
        - Microfrontends
      description: Search for microfrontend(s) by search criteria
      operationId: searchMicrofrontends
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MicrofrontendSearchCriteria'
      responses:
        '200':
          description: Corresponding microfrontends
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MicrofrontendPageResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /microfrontends/{id}:
    get:
      tags:
        - Microfrontends
      description: Return microfrontend by ID
      operationId: getMicrofrontend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microfrontend'
        '404':
          description: Not Found
    put:
      tags:
        - Microfrontends
      description: Update microfrontend by ID
      operationId: updateMicrofrontend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMicrofrontendRequest'
      responses:
        '204':
          description: Microfrontend updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        '404':
          description: Microfrontend not found
    delete:
      tags:
        - Microfrontends
      description: Delete microfrontend by ID
      operationId: deleteMicrofrontend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'

  /products:
    post:
      tags:
        - Products
      description: Create new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: New product created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /products/search:
    post:
      tags:
        - Products
      description: Search for products by search criteria
      operationId: searchProducts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSearchCriteria'
      responses:
        '200':
          description: Corresponding products (by search criteria)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPageResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /products/{id}:
    get:
      tags:
        - Products
      description: Return product by ID
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    put:
      tags:
        - Products
      description: Update product by ID
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '204':
          description: Product updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    delete:
      tags:
        - Products
      description: Delete product by ID
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
components:
  schemas:
    ProductPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource (counted items in resultset).
          type: integer
        number:
          format: int32
          type: integer
          description: Number of page which has been queried (e.g. 2 of 10)
        size:
          format: int32
          type: integer
          description: correlated to the input (pagesize)), how many products should be shown on a single page.
        totalPages:
          format: int64
          type: integer
          description: representing the total amount of pages based on the size provided in the request.
        stream:
          type: array
          description: result set of the given search criteria.
          items:
            $ref: '#/components/schemas/ProductAbstract'
    ProductSearchCriteria:
      type: object
      properties:
        name:
          type: string
          nullable: true
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 10
          minimum: 1
          exclusiveMinimum: false
          type: integer
    CreateProductRequest:
      type: object
      required:
        - name
        - version
        - basePath
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        basePath:
          type: string
        displayName:
          type: string
        iconName:
          type: string
        classifications:
          type: array
          uniqueItems: true
          items:
            type: string
    UpdateProductRequest:
      type: object
      required:
        - name
        - version
        - basePath
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        basePath:
          type: string
        displayName:
          type: string
        iconName:
          type: string
        classifications:
          type: array
          uniqueItems: true
          items:
            type: string
    Product:
      type: object
      required:
        - id
        - name
        - basePath
      properties:
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        name:
          type: string
        operator:
          type: boolean
        version:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        basePath:
          type: string
        displayName:
          type: string
        iconName:
          type: string
        classifications:
          type: array
          uniqueItems: true
          items:
            type: string
    ProductAbstract:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: technical id for a product (unique). Can be used to fetch further product details.
        name:
          type: string
          description: business key for identifying product
        description:
          type: string
          description: textual description for a product.
        imageUrl:
          type: string
          description: product image as url.
        displayName:
          type: string
          description: name of the product used for displaying to user.
    OffsetDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50-04:00
    ProblemDetailResponse:
      type: object
      properties:
        errorCode:
          type: string
        detail:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailParam'
        invalidParams:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailInvalidParam'
    ProblemDetailParam:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ProblemDetailInvalidParam:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    MicrofrontendPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendAbstract'
    MicrofrontendAbstract:
      required:
        - id
        - remoteBaseUrl
        - productName
        - appId
        - appName
      type: object
      properties:
        id:
          type: string
        appId:
          type: string
        appName:
          type: string
        description:
          type: string
        remoteBaseUrl:
          type: string
        productName:
          type: string
    MicrofrontendSearchCriteria:
      type: object
      properties:
        appId:
          type: string
          nullable: true
        appName:
          type: string
          nullable: true
        productName:
          type: string
          nullable: true
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 10
          minimum: 1
          exclusiveMinimum: false
          type: integer
    CreateMicrofrontendRequest:
      required:
        - remoteEntry
        - remoteBaseUrl
        - productName
        - appId
        - appVersion
        - appName
      type: object
      properties:
        appId:
          type: string
        appVersion:
          type: string
        appName:
          type: string
        description:
          type: string
        remoteBaseUrl:
          type: string
        remoteEntry:
          type: string
        technology:
          type: string
        productName:
          type: string
        classifications:
          type: array
          uniqueItems: true
          items:
            type: string
        contact:
          type: string
        iconName:
          type: string
        note:
          type: string
        exposedModule:
          type: string
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/CreateUIEndpoint'
    CreateUIEndpoint:
      required:
        - path
        - name
      type: object
      properties:
        path:
          type: string
        name:
          type: string
    UpdateMicrofrontendRequest:
      required:
        - remoteEntry
        - remoteBaseUrl
        - productName
        - appId
        - appVersion
        - appName
      type: object
      properties:
        appId:
          type: string
        appVersion:
          type: string
        appName:
          type: string
        description:
          type: string
        remoteBaseUrl:
          type: string
        remoteEntry:
          type: string
        productName:
          type: string
        technology:
          type: string
        classifications:
          type: array
          uniqueItems: true
          items:
            type: string
        contact:
          type: string
        iconName:
          type: string
        note:
          type: string
        exposedModule:
          type: string
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/UpdateUIEndpoint'
    UpdateUIEndpoint:
      required:
        - path
        - name
      type: object
      properties:
        path:
          type: string
        name:
          type: string
    Microfrontend:
      required:
        - remoteEntry
        - remoteBaseUrl
        - productName
        - appId
        - appVersion
        - appName
      type: object
      properties:
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        operator:
          type: boolean
        appId:
          type: string
        appVersion:
          type: string
        appName:
          type: string
        description:
          type: string
        technology:
          type: string
        remoteBaseUrl:
          type: string
        remoteEntry:
          type: string
        productName:
          type: string
        classifications:
          type: array
          uniqueItems: true
          items:
            type: string
        contact:
          type: string
        iconName:
          type: string
        note:
          type: string
        exposedModule:
          type: string
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/UIEndpoint'
    UIEndpoint:
      required:
        - path
        - name
      type: object
      properties:
        path:
          type: string
        name:
          type: string
